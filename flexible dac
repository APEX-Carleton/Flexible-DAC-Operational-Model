from pyomo.environ import *
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

T=336

#Data
gen = pd.read_excel('gen_data.xlsx')

#model
m = ConcreteModel()

#Indices
m.t = RangeSet(T)

#limits for wind power
def lim_pw(m,t):
    return (0 , gen.loc[t-1,'pw']/1000)

#limits for pv power

def lim_pv(m,t):
    return (0 , gen.loc[t-1,'p_pv']/1000)

#parameters
m.X_p = Param(initialize=260, within=NonNegativeReals)  #pellet reactor throughput (tons of caco3/hour)
m.X_s = Param(initialize=145.6, within=NonNegativeReals)  #Slaker throughput (tons of cao/hour)
m.R_cc_max = Param(initialize=240, within=NonNegativeReals) #Maximum mass flow rate into caco3 silo
m.R_c_max = Param(initialize=135,  within=NonNegativeReals)  #Maximum mass flow rate into cao silo
m.M_cc_max = Param(initialize=0, mutable=True, within=NonNegativeReals) #capacity of caco3 silo
m.M_c_max = Param(initialize=0, mutable=False, within=NonNegativeReals) #capacity of caco3 silo
m.P_df = Param(initialize=20, within=NonNegativeReals)   #DAC plant fixed demand
m.E_ess_max = Param(initialize=355, mutable=True, within=NonNegativeReals) #Storage capacity of the energy storage system
m.P_ess_max = Param(initialize=65, mutable=True, within=NonNegativeReals) #Maximum charge/discharge power of energy storage system
#m.M_co2_max = Param(initialize=5480, within=NonNegativeReals) #Maximum co2 capacity of the DAC plant
m.C_ng = Param(initialize=27.77, within=NonNegativeReals) #Cost of power from natural gas generator #27.77
m.C_c = Param(initialize=14.45, within=NonNegativeReals) #Carbon tax #14.45
#m.M_c = Param(within=NonNegativeReals) #Mass of co2 produced per kWh of NG power generated
m.dt = Param(initialize=1.0, within=NonNegativeReals)


#Model variables
m.rcc = Var(m.t, bounds=(-m.R_cc_max, m.R_cc_max), within=Reals)   #Flow rate into the calcium carbonate  silo
m.rc = Var(m.t, bounds=(-m.R_c_max, m.R_c_max), within=Reals) #Flow rate into the calcium oxide silo
m.mcc = Var(m.t, bounds=(0, m.M_cc_max), within=NonNegativeReals) #Mass of calcium carbonate stored
m.mc = Var(m.t, bounds=(0, m.M_c_max), within=NonNegativeReals) #Mass of calcium oxide stored
m.p_ng = Var(m.t, bounds=(0,165), within=NonNegativeReals) #Power generated by the natural gas plant
m.p_w = Var(m.t, bounds=lim_pw, within=NonNegativeReals) #Power supplied by the wind turbine plant
m.p_s = Var(m.t, bounds=lim_pv, within=NonNegativeReals) #Power supplied by the pv plant
m.p_ess = Var(m.t, bounds=(-m.P_ess_max, m.P_ess_max), initialize=0, within=Reals) #Power flowing to/from the battery
m.E_ess = Var(m.t, bounds=(0, m.E_ess_max), initialize=0, within=NonNegativeReals) #Energy level of the battery
m.m_co2 = Var(m.t, within=NonNegativeReals) #Mass of co2 regenerated
m.p_dv = Var(m.t, within=NonNegativeReals) #Variable demand of the DAC plant
m.x_c = Var(m.t, bounds= (0, 500), within=NonNegativeReals) #Total calcination line throughput at time t

#objective function
def objective(m):
    return sum(((m.C_ng+m.C_c)*m.dt*m.p_ng[t]) for t in m.t)

m.objective = Objective(rule=objective, sense=minimize)

#Power balance at the supply busbar
def power_balance(m, t):
    return m.p_dv[t]+m.P_df == m.p_ng[t] + m.p_w[t] + m.p_s[t] + m.p_ess[t]

m.power_balance = Constraint(m.t, rule=power_balance)


##Battery energy storage dynamics
def battery_energy_level(m, t):
    if t==1:
        return  m.E_ess[t]== 0.0-m.p_ess[t]*m.dt
    else:
        return m.E_ess[t]==m.E_ess[t-1] - m.p_ess[t]*m.dt 

m.battery_energy_level = Constraint(m.t, rule=battery_energy_level)

#carbonate storage dynamics
def caco3_silo_level(m, t):
    if t==1:
        return  m.mcc[t]== m.rcc[t]*m.dt 
    else:
        return m.mcc[t]==m.mcc[t-1] + m.rcc[t]*m.dt 

m.caco3_silo_level = Constraint(m.t, rule=caco3_silo_level)

def caco3_silo_final(m):
    return m.mcc[T] ==0
m.caco3_silo_final = Constraint(rule=caco3_silo_final)

#oxide storage dynamics
def cao_silo_level(m, t):
    if t==1:
        return  m.mc[t]== m.M_c_max+ m.rc[t]*m.dt
    else:
        return m.mc[t]==m.mc[t-1] + m.rc[t]*m.dt 

m.cao_silo_level = Constraint(m.t, rule=cao_silo_level)


#calcium carbonate flow
def carbonate_flow(m, t):
    return m.X_p == m.rcc[t] + m.x_c[t]

m.carbonate_flow = Constraint(m.t, rule=carbonate_flow)

#calcium oxide flow
def oxide_flow(m, t):
    return 0.56*m.x_c[t] == m.X_s + m.rc[t] 

m.oxide_flow = Constraint(m.t, rule=oxide_flow)

#mass of co2 produced
def mass_co2_produced(m, t):
    return m.m_co2[t] ==0.44*m.x_c[t]*m.dt

m.mass_co2_produced = Constraint(m.t, rule=mass_co2_produced)

#Variable demand
def variable_demand(m, t):
    return m.p_dv[t] == 1.226*m.m_co2[t]
    #return m.p_dv[t] == 140.25

m.variable_demand = Constraint(m.t, rule=variable_demand)  

#Calciner ramping rate

#1. Rampup
# def rampUp(m, t):
#     if t+1<=T:
#         return abs(m.x_c[t+1])-abs(m.x_c[t]) <= 50.0
#     else:
#         return Constraint.Skip 
    
# #m.rampUp = Constraint(m.t, rule=rampUp)

# #2. Rampdown
# def rampDown(m, t):
#     if t+1<=T:
#         return abs(m.x_c[t])-abs(m.x_c[t+1]) <= 50.0
#     else:
#         return Constraint.Skip 
    
#m.rampDown = Constraint(m.t, rule=rampDown)
